<?xml version="1.0" encoding="utf-8" ?>
<CodeSnippets  xmlns="http://schemas.microsoft.com/VisualStudio/2005/CodeSnippet">
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>SegmentTree</Title>
      <Shortcut>SegmentTree</Shortcut>
      <Description>Code snippet for SegmentTree</Description>
      <Author>Tyamgin</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
        <SnippetType>SurroundsWith</SnippetType>
      </SnippetTypes>
    </Header>
    
    
    <Snippet>
      <Declarations>
        
      </Declarations>
      <Code Language="cpp">
          <![CDATA[template <typename Type, class MainOperator, class AddOperator = MainOperator> class SegmentTree
{
protected:
	vector<Type> t;
	int ppow;
	Type defaultValue;
	MainOperator Operator;
	AddOperator addOperator;

public:
	SegmentTree(int size, Type defaultValue)
	{
		this->ppow = size;
		this->defaultValue = defaultValue;
		t.assign(ppow * 2, defaultValue);
	}
	
	template<typename Iterator> 
	SegmentTree(Iterator begin, Iterator end, Type defaultValue) 
	{
		this->defaultValue = defaultValue;
		vector<Type> values(begin, end);
		ppow = values.size();
		while(ppow & (ppow - 1))
			ppow++;
		t.assign(ppow * 2, defaultValue);
		for(int i = 0; i < (int)values.size(); i++)
			t[i + ppow] = values[i];
		for(int i = ppow - 1; i > 0; i--)
			t[i] = Operator(t[i * 2], t[i * 2 + 1]);
	}
	Type Get(int L, int R) 
	{
		L += ppow;
		R += ppow;
		Type res = defaultValue;
		while(L <= R)
		{
			if (L & 1)
				res = Operator(res, t[L++]);
			if (~R & 1)
				res = Operator(res, t[R--]);
			L /= 2;
			R /= 2;
		}
		return res;
	}
	void Add(int pos, Type value)
	{
		pos += ppow;
		t[pos] = addOperator(t[pos], value);
		pos /= 2;
		while(pos > 0)
		{
			t[pos] = Operator(t[pos * 2], t[pos * 2 + 1]);
			pos /= 2;
		}
	}
	void Set(int pos, Type value)
	{
		pos += ppow;
		t[pos] = value;
		pos /= 2;
		while(pos > 0)
		{
			t[pos] = Operator(t[pos * 2], t[pos * 2 + 1]);
			pos /= 2;
		}
	}
};

struct Sum { int operator() (int a, int b) { return a + b; } };
          ]]>
      </Code>
    </Snippet>

  </CodeSnippet>
</CodeSnippets>